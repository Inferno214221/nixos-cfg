# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.

# Whoops ^
{ config, lib, pkgs, modulesPath, ... }:
{
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  boot = {
    initrd = {
      availableKernelModules = [ "xhci_pci" "thunderbolt" "vmd" "ahci" "nvme" "usb_storage" "usbhid" "sd_mod" ];
      kernelModules = [];
      # Start Plymouth Earlier
      systemd.enable = true;
      verbose = false;
    };

    kernelModules = [ "kvm-intel" ];
    extraModulePackages = [];

    loader = {
      efi.canTouchEfiVariables = true;
      
      grub = {
        enable = true;
        device = "nodev";
        efiSupport = true;
        useOSProber = true;

        # Append to end
        extraInstallCommands =  ''
          cat << EOF >> /boot/grub/grub.cfg

          menuentry 'BIOS Settings' --class brunch-settings 'uefi-firmware' {
            fwsetup
          }

          menuentry "Shut Down" --class shutdown {
            halt
          }
          EOF
        '';
      };

      grub2-theme = {
        enable = true;
        theme = "stylish";
        footer = true;
        customResolution = "1920x1080";
        splashImage = ../../../home/desktop/pictures/bg0.png;
      };
    };

    supportedFilesystems = [ "ntfs" ];

    plymouth.enable = true;

    consoleLogLevel = 3;
    kernelParams = [
      # Reduce Messages For Plymouth
      "quiet"
      "splash"
      "boot.shell_on_fail"
      "udev.log_priority=3"
      "rd.systemd.show_status=auto"
      # VirtualBox Fix
      "kvm.enable_virt_at_load=0"
    ];
  };

  fileSystems = {
    "/" = {
      device = "/dev/disk/by-uuid/28bbc53f-ff0f-44ae-9ea9-8fc9af2f5cb6";
      fsType = "ext4";
    };

    "/boot" = {
      device = "/dev/disk/by-uuid/4629-DBE1";
      fsType = "vfat";
      options = [ "fmask=0022" "dmask=0022" ];
    };
  };

  swapDevices = [
    {
      device = "/dev/disk/by-uuid/fa7e302c-879b-4b8b-9ce2-91a7b6c30f92";
    }
  ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp44s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp0s20f3.useDHCP = lib.mkDefault true;

  # Load nvidia driver for Xorg and Wayland
  services.xserver.videoDrivers = [ "nvidia" ];

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";

  time.hardwareClockInLocalTime = false;

  hardware = {
    bluetooth.enable = true;

    cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;

    graphics = {
      enable = true;
      enable32Bit = true;
    };

    nvidia = {
      # Modesetting is required.
      modesetting.enable = true;

      powerManagement = {
        # Nvidia power management. Experimental, and can cause sleep/suspend to fail.
        # Enable this if you have graphical corruption issues or application crashes after waking
        # up from sleep. This fixes it by saving the entire VRAM memory to /tmp/ instead 
        # of just the bare essentials.
        enable = false;

        # Fine-grained power management. Turns off GPU when not in use.
        # Experimental and only works on modern Nvidia GPUs (Turing or newer).
        finegrained = false;
      };

      # Use the NVidia open source kernel module (not to be confused with the
      # independent third-party "nouveau" open source driver).
      # Support is limited to the Turing and later architectures. Full list of 
      # supported GPUs is at: 
      # https://github.com/NVIDIA/open-gpu-kernel-modules#compatible-gpus 
      # Only available from driver 515.43.04+
      # Currently alpha-quality/buggy, so false is currently the recommended setting.
      open = false;

      # Enable the Nvidia settings menu,
      # accessible via `nvidia-settings`.
      nvidiaSettings = true;

      # Optionally, you may need to select the appropriate driver version for your specific GPU.
      package = config.boot.kernelPackages.nvidiaPackages.stable;

      prime = {
        offload = {
          enable = true;
          enableOffloadCmd = true;
        };
        intelBusId = "PCI:0:2:0";
        nvidiaBusId = "PCI:1:0:0";
      };
    };
  };

  # boot.blacklistedKernelModules = [ "nvidia" "nvidia_drm" "nvidia_modeset" ]; # "noveau"
}
